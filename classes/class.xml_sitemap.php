<?php
/*
Version History:
  1.0.5 (2017-02-11)
    1) Implemented Archive mode for sites that disables robots.txt and sitemap.xml
    2) Moved code dealing with robots.txt generation into its own class
    3) Multiple PSR-2 fixes
*/
class XML_Sitemap extends Record
{
    const VERSION = '1.0.5';

    private $_items =         array();
    private $_navsuiteID =    0;
    private $_xml =           "";
    private $vars;

    public function draw()
    {
        $this->setup();
        $this->get_xml_head();
        $this->get_xml_items();
        $this->get_xml_foot();
        header('Content-Type: application/xml');
        return $this->_xml;
    }

    private function get_items()
    {
        $buttons = $this->get_items_recursive($this->_navsuiteID);
        if (!$buttons) {
            return;
        }
        $buttons_arr = explode("\n", $buttons);
        $buttons = array();
        $urls = array();
        foreach ($buttons_arr as $button) {
            if ($button) {
                $button_arr =   explode('|', $button);
                if (!isset($urls[$button_arr[2]])) {
                    $urls[$button_arr[2]] = true;
                    $depth =        count(explode('/', $button_arr[2]))-4;
                    $buttons[] =    array(
                    'changefreq' => $button_arr[1],
                    'depth' =>      $depth,
                    'loc' =>        $button_arr[2],
                    'priority' =>   $button_arr[0]
                    );
                }
            }
        }
        $order_arr =
            array(
            array('priority','d'),
            array('depth','a'),
            array('loc','a')
        );
        $this->_items = $this->sort_records($buttons, $order_arr);
    }

    private function get_items_recursive($childID = false)
    {
        $out = array();
        $Obj_Nav_Suite =    new \Nav\Suite($childID);
        $buttons =          $Obj_Nav_Suite->getButtons();
        if ($buttons) {
            foreach ($buttons as $button) {
                if ($button['sitemap_priority'] && $button['visible']) {
                    $childID =    $button['childID'];
                    $bURL =       $button['URL'];
                    if (substr($bURL, 0, 8)=='./?page=') {
                        $bURL = BASE_PATH.substr($bURL, 8);
                    } elseif (substr($bURL, 0, 2)=='./') {
                        $bURL = BASE_PATH.substr($bURL, 2);
                    }
                    $out[] =
                         $button['sitemap_priority']."|"
                        .$button['sitemap_frequency']."|"
                        .trim($this->vars['URL'], '/')."/".trim($bURL, '/');
                    if ($childID) {
                        $out[] = $this->get_items_recursive($childID);
                    }
                }
            }
        }
        return implode("\n", $out);
    }

    private function get_navsuiteID()
    {
        $Obj_Layout =  new Layout($this->vars['defaultLayoutID']);
        $this->_navsuiteID = $Obj_Layout->get_field('navsuite1ID');
    }

    private function get_xml_foot()
    {
        $this->_xml.= "</urlset>\n";
    }

    private function get_xml_head()
    {
        $this->_xml.=
         "<"."?xml version=\"1.0\" encoding=\"UTF-8\""."?>\n"
        ."<urlset\n"
        ." xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\n"
        ." xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\n"
        ." xmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\"\n"
        ." xsi:schemaLocation=\"\n"
        ."   http://www.sitemaps.org/schemas/sitemap/0.9\n"
        ."   http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\n"
        ."\">\n"
        ."<!--\n"
        ."  XML Sitemap for ".$this->vars['textEnglish']." [".$this->vars['URL']."]\n"
        ."  Generated by "
        .System::get_item_version('system_family')." "
        .System::get_item_version('codebase').".".$this->vars['db_version']
        ." -->\n"
        .($this->vars['archive'] ? "<!-- This site is ARCHIVED and should NOT be indexed -->\n" : "");
    }

    private function get_xml_items()
    {
        if ($this->vars['archive']) {
            return;
        }
        foreach ($this->_items as $item) {
            $this->_xml.=
             "  <url>\n"
            ."    <loc>".$item['loc']."</loc>\n"
            ."    <changefreq>".$item['changefreq']."</changefreq>\n"
            ."    <priority>".$item['priority']."</priority>\n"
            ."  </url>\n";
        }
    }

    private function setup()
    {
        global $system_vars;
        $this->vars = $system_vars;
        if (!$this->vars) {
            die('XML_Sitemap Error: No site with ID '.SYS_ID);
        }
        $this->get_navsuiteID();
        $this->get_items();
    }
}
